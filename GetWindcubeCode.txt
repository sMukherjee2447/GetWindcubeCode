exports.WincubeURLCodeIssue = async (req,res) =>{
  try{

    const axios = require('axios').default;
    const crypto = require('crypto');
    const algorithm = 'aes-256-cbc';
    const key = crypto.randomBytes(32);
    const iv = crypto.randomBytes(16);
    const fs = require('fs');
    const CircularJSON = require('circular-json');
     
    var publicKey  = fs.readFileSync('/var/www/html/nodeserver.brainiuminfotech.com/public_html/jajakul/giftingService/public/publickey.pem', 'utf8')


    var custId = encrypt("bonedagift",key,iv)
    var pwd = encrypt("123wincube*",key,iv)
    var autKey = encrypt("36ca4652c2cf53f43c0f0bea3ece2bac7a0afd5250e16c58b56cde2bd9c49ca5",key,iv)


    const aesKey = crypto.publicEncrypt(
            {
                key: publicKey,
                padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
                oaepHash: "sha256",
            },
            // We convert the data string to a buffer using `Buffer.from`
            Buffer.from(key)
    )

    const aesIv = crypto.publicEncrypt(
            {
                key: publicKey,
                padding: crypto.constants.RSA_PKCS1_OAEP_PADDING,
                oaepHash: "sha256",
            },
            // We convert the data string to a buffer using `Buffer.from`
            Buffer.from(iv)
    )

   
      var options = {
        'method': 'POST',
        'url': 'http://dev.giftting.co.kr:48081/auth/code/issue',
        'headers': {
          'Content-Type': 'application/json'
        },
        'body' : {
            "custId": custId.encryptedData,
            "pwd": pwd.encryptedData,
            "autKey": autKey.encryptedData,
            "aesKey": aesKey.toString("base64"),
            "aesIv": aesIv.toString("base64")

        }
      };
       


      }catch(error){
          utils.handleError(res, error)
      }
}

function encrypt(text,key,iv) {
 const crypto = require('crypto');
 let cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key), iv);
 let encrypted = cipher.update(text);
 encrypted = Buffer.concat([encrypted, cipher.final()]);
 return {  encryptedData: encrypted.toString('hex') };
 // return { iv: iv.toString('hex'),key: key.toString('hex'), encryptedData: encrypted.toString('hex') };
}



